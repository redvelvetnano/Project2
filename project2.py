# -*- coding: utf-8 -*-
"""project2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3byHn9tOXdSB-lb8wI7H8UnTry4g15k
"""

# JWKS Server with Base64URL encoding for JWKS keys (for Gradebot)
import sqlite3
import time
import base64
from flask import Flask, request, jsonify
from jwt import encode as jwt_sign
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

DATABASE = "totally_not_my_privateKeys.db"
app = Flask(__name__)

db = sqlite3.connect(DATABASE, check_same_thread=False)
cur = db.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS keys (
        kid INTEGER PRIMARY KEY AUTOINCREMENT,
        key BLOB NOT NULL,
        exp INTEGER NOT NULL
    )
''')
db.commit()

def pem_serialize(priv_key):
    return priv_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

def pem_deserialize(pem):
    return serialization.load_pem_private_key(pem, password=None, backend=default_backend())

def save_key_to_db(priv_key, expiration):
    pem = pem_serialize(priv_key)
    cur.execute("INSERT INTO keys (key, exp) VALUES (?, ?)", (pem, expiration))
    db.commit()

def fetch_key(expired=False):
    now = int(time.time())
    query = "SELECT kid, key FROM keys WHERE exp {} ? ORDER BY kid DESC LIMIT 1".format("<=" if expired else ">")
    cur.execute(query, (now,))
    result = cur.fetchone()
    if result:
        kid, pem = result
        return str(kid), pem_deserialize(pem)
    return None, None

# Re-create fresh keys every time
cur.execute("DELETE FROM keys")
db.commit()
now = int(time.time())
save_key_to_db(
    rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend()),
    now + 3600
)
save_key_to_db(
    rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend()),
    now - 3600
)
print("üîê Re-inserted fresh valid and expired keys.")

# Base64url encoder (no padding)
def b64url(num):
    return base64.urlsafe_b64encode(num.to_bytes((num.bit_length() + 7) // 8, 'big')).rstrip(b'=').decode()

@app.route("/.well-known/jwks.json", methods=["GET"])
def provide_jwks():
    cur.execute("SELECT kid, key FROM keys")
    entries = cur.fetchall()
    keys = []
    for kid, pem in entries:
        pub_key = pem_deserialize(pem).public_key()
        numbers = pub_key.public_numbers()
        keys.append({
            "kty": "RSA",
            "use": "sig",
            "kid": str(kid),
            "alg": "RS256",
            "n": b64url(numbers.n),
            "e": b64url(numbers.e)
        })
    print(f"üì§ JWKS includes kid values: {[k['kid'] for k in keys]}")
    return jsonify({"keys": keys})

@app.route("/auth", methods=["POST"])
def issue_token():
    expired = request.args.get("expired") is not None
    kid, key = fetch_key(expired)
    if not key:
        return jsonify({"error": "Key not found"}), 500

    claims = {
        "sub": "userABC",
        "username": "userABC",
        "iat": int(time.time()),
        "exp": int(time.time()) + 600
    }

    jwt_token = jwt_sign(
        claims,
        key,
        algorithm="RS256",
        headers={"kid": str(kid)}
    )

    print(f"üîë Issued token with kid={kid} (expired={expired})")

    db.commit()
    time.sleep(1)

    return jsonify({"token": jwt_token})

def example_sql_safe_query():
    print("üß™ Running parameterized SQL query")
    cur.execute("SELECT * FROM keys WHERE kid = ?", (1,))

if __name__ == '__main__':
    example_sql_safe_query()
    print("üöÄ Starting JWKS Server on http://localhost:8080")
    app.run(host="0.0.0.0", port=8080)